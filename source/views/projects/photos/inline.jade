extend /views/skeleton
block content
    .textblock Loading steps: 
        ul.inline
            li The main script detects a gallery and
                +link('/projects/code/gists/loadgallery', 'gnaoh.loadGallery') is called.
            pre.prettyprint.condensed
                = '<div class="gallery" id="ID" data-start="1" data-amount="10" data-captions="true">'
        ul.inline
            li Options are extracted from the div tag and applied:
            pre.prettyprint.condensed.
                id = 'ID'                    // source directory/path of the photos.
                data-start = '1'             // starting index (photos are named with /\d{1}\.jpg/ pattern).
                data-captions='true'         // specifies if captions exist.
            li= 'The loop creates and appends <img> tags to the gallery.'
            li An AJAX request is made to obtain the JSON file with the captions.
            pre.prettyprint.condensed.
                // Example:
                {
                    "1": "Japanese Lantern Festival - Como Zoo, St. Paul",
                    "2": "Amsterdam, Holland",
                    "3": "Minnesnowta - Minneapolis"
                }
            li Separate loop matches the caption to the proper photo according to its key:value pair.
    .textblock Logic and thoughts:
        ul.inline
            li Quick and easy way to load series of photos exported from Photoshop/Lightroom.
            li This method allows the page to load without hindrance (DOMready ~400ms). 
            li The progressive photos are asynchronously loaded. With the SPDY protocol, more
                +lightbox('misc/waterfall.png', 'SPDY on the left, plain http on the right.', 'concurrent') 
                | data streams for photos are possible.  
            li Will NOT work with browsers sans javascript. A future revision will port this function to Node.js and have the backend generate the markup instead.

    #sample(class='gallery', data-start='1', data-amount='21', data-captions='true')